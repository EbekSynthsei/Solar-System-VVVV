extern alias e3;
extern alias e2;
extern alias e4;

using n5 = _VL_Bezier_Cubic_.Math.Advanced;
using n19 = _CoreLibBasics_.Control.Advanced;
using n6 = e2::VL.Lib.Collections;
using n16 = _VL_Bezier_Cubic_;
using n10 = _VL_Bezier_Cubic_.Math;
using n3 = _VL_Bezier_Cubic_.Math.Experimental;
using n9 = global::System.Collections.Generic;
using n13 = _CoreLibBasics_.Math.Adaptive;
using n14 = _CoreLibBasics_.Primitive.TypeHelpers.Advanced;
using n12 = _CoreLibBasics_.Primitive.Advanced.Adaptive;
using n17 = _VL_Bezier_Cubic_.Math.BezierPatch;
using n21 = e3::VL.Lib.Mathematics;
using n1 = e2::VL.Core;
using n2 = global::System;
using n15 = e4::Stride.Core.Mathematics;
using n4 = e2::VL.Core.CompilerServices;
using n11 = _VL_Bezier_Cubic_.Math.BezierSegment;
using n20 = _VL_Collections_.Collections.Sequence;
using n7 = global::System.Runtime.CompilerServices;
using n8 = _VL_Collections_.Collections.Spread;
using n18 = _CoreLibBasics_._3D.Vector3;

namespace _VL_Bezier_Cubic_.Math.Experimental
{
    [n1.ElementAttribute(TracingId = 18752U, DocumentId = "Ve9QvEWam1QMhGjejnDn64", PersistentId = "NdbTRORnIJoQMHHvoP950r", Name = "BezierSpline_R")]
    [n2.SerializableAttribute]
    public class BezierSpline_R<T> : n1.VLObject, n2.IDisposable
    {
        [n4.CreateNewAttribute]
        public static n3.BezierSpline_R<T> Create(n1.NodeContext Node_Context)
        {
            Node_Context = Node_Context.WithIsImmutable(true);
            var instance = new BezierSpline_R<T>(Node_Context, n1.VLObject.NewIdentity());
            return instance.__Create__(Node_Context);
        }

        [n4.CreateDefaultAttribute]
        public static n3.BezierSpline_R<T> CreateDefault()
        {
            return __DEFAULT__ ?? (__DEFAULT__ = __COMPUTE__());
            n3.BezierSpline_R<T> __COMPUTE__()
            {
                var context = n1.NodeContext.Default.WithIsImmutable(true);
                var instance = new BezierSpline_R<T>(context, n1.VLObject.NewIdentity());
                return instance.__CreateDefault__();
            }
        }

        [n1.ElementAttribute(IsAutoGenerated = true)]
        public static n3.BezierSpline_R<T> __DEFAULT__;
        public n3.BezierSpline_R<T> Split(out n6.Spread<n5.BezierKnot_R<T>> Result_Out)
        {
            n6.Spread<n5.BezierKnot_R<T>> __auto_0 = this.Knots;
            Result_Out = __auto_0;
            return this;
        }

        public n3.BezierSpline_R<T> Join(n6.Spread<n5.BezierKnot_R<T>> Knots_In)
        {
            n6.Spread<n5.BezierKnot_R<T>> __auto_0 = Knots_In;
            n3.BezierSpline_R<T> that_1 = this;
            that_1 = Knots_In != this.Knots ? new BezierSpline_R<T>(this)
            {Knots = Knots_In} : that_1;
            return that_1;
        }

        public n3.BezierSpline_R<T> __Create__(n1.NodeContext Node_Context)
        {
            n7.RuntimeHelpers.EnsureSufficientExecutionStack();
            n3.BezierSpline_R<T> that_0 = this;
            this.Knots = n8._Operations_.CreateDefault<n5.BezierKnot_R<T>>();
            return that_0;
        }

        public n3.BezierSpline_R<T> __CreateDefault__()
        {
            n3.BezierSpline_R<T> that_0 = this;
            this.Knots = n8._Operations_.CreateDefault<n5.BezierKnot_R<T>>();
            return that_0;
        }

        public void Dispose()
        {
            return;
        }

        void n2.IDisposable.Dispose()
        {
            using var __current_services = __GetServiceRegistry__().MakeCurrentIfNone();
            Dispose();
        }

        [n1.ElementAttribute(TracingId = 18754U, DocumentId = "Ve9QvEWam1QMhGjejnDn64", PersistentId = "ECc0bjxnCdIOoEyaDq97Qh", Name = "Knots")]
        public n6.Spread<n5.BezierKnot_R<T>> Knots;
        public BezierSpline_R(n1.NodeContext __context__, uint __identity__): base(__context__, __identity__)
        {
        }

        internal BezierSpline_R(BezierSpline_R<T> other): base(other)
        {
            this.Knots = other.Knots;
        }

        protected override n1.IVLObject __With__(n9.IReadOnlyDictionary<string, n2.Object> values)
        {
            return __WITH__(n1.CompilationHelper.GetValueOrExisting(values, "Knots", in Knots));
        }

        internal BezierSpline_R<T> __WITH__(n6.Spread<n5.BezierKnot_R<T>> Knots)
        {
            n3.BezierSpline_R<T> that_0 = this;
            that_0 = Knots != this.Knots ? new BezierSpline_R<T>(this)
            {Knots = Knots} : that_0;
            return that_0;
        }
    }
}

namespace _VL_Bezier_Cubic_.Math.BezierSpline.Experimental
{
    [n1.ElementAttribute(TracingId = 18743U, DocumentId = "Ve9QvEWam1QMhGjejnDn64", Name = "_Operations_")]
    public static partial class _Operations_
    {
        public static void BezierSplineSpread<T, AdM>(n3.BezierSpline_R<T> Input_In, int Count_In, out n6.Spread<T> Points_Out, out int Segment_Count_Out)
            where AdM : struct, n12.IAdaptiveCreateDefault<T>, n13.IAdaptiveLerp<T>
        {
            var w_0 = default(AdM);
            var Output_2 = Input_In.Split(Result_Out: out n6.Spread<n5.BezierKnot_R<T>> Result_1);
            n11._Operations_.BezierSegmentsFromBezierKnots<T, AdM>(BezierKnots_In: Result_1, Result_Out: out n6.Spread<n10.BezierSegment_R<T>> Result_3, Segment_Count_Out: out int Segment_Count_4);
            int Input_2_5 = 0;
            var Result_6 = Segment_Count_4 > Input_2_5;
            int Input_2_7 = 0;
            var Result_8 = Count_In > Input_2_7;
            bool Apply_9 = true;
            var Output_10 = Result_6;
            if (Apply_9)
            {
                var Output_11 = Result_6 && Result_8;
                Output_10 = Output_11;
            }

            var Empty_12 = n8._Operations_.CreateDefault<T>();
            n6.Spread<T> Points_13;
            int Segment_Count_14;
            if (Output_10)
            {
                n6.Spread<n6.Spread<T>> __cp_Muoyiu7E0p8LI6QIAKgLU1 = n8._Operations_.CreateDefault<n6.Spread<T>>();
                int __pad_FO2mVTKk1AMOF6Nx3epBve_15 = __slot_FO2mVTKk1AMOF6Nx3epBve;
                int __pad_D7p9SwOuph0QP0DmjJaqQr_16 = __slot_D7p9SwOuph0QP0DmjJaqQr;
                bool Apply_17 = true;
                var Output_18 = Segment_Count_4;
                if (Apply_17)
                {
                    var Output_19 = Segment_Count_4 - __pad_FO2mVTKk1AMOF6Nx3epBve_15;
                    Output_18 = Output_19;
                }

                bool Apply_20 = true;
                var Output_21 = Count_In;
                if (Apply_20)
                {
                    var Output_22 = Count_In + Output_18;
                    Output_21 = Output_22;
                }

                var Output_24 = n2.Math.DivRem(a: Output_21, b: Segment_Count_4, result: out int Result_23);
                n8._Operations_.Repeat<int>(Element_In: Output_24, Count_In: Output_18, Result_Out: out n6.Spread<int> Result_25);
                bool Apply_26 = true;
                var Output_27 = Output_24;
                if (Apply_26)
                {
                    var Output_28 = Output_24 + Result_23;
                    Output_27 = Output_28;
                }

                bool Apply_29 = true;
                var Output_30 = Result_25;
                if (Apply_29)
                {
                    n8._Operations_.Add<int>(Input_In: Result_25, Item_In: Output_27, Output_Out: out Output_30);
                }

                n8._Operations_.Count<n10.BezierSegment_R<T>>(Input_In: Result_3, Count_Out: out int Count_31);
                bool Apply_32 = true;
                var Output_33 = Count_31;
                if (Apply_32)
                {
                    var Output_34 = Count_31 - __pad_D7p9SwOuph0QP0DmjJaqQr_16;
                    Output_33 = Output_34;
                }

                var enumerator_35 = n4.CollectionExtensions.AsSpan(Result_3).GetEnumerator();
                var enumerator_37 = n4.CollectionExtensions.AsSpan(Output_30).GetEnumerator();
                var builder_45 = n4.CollectionBuilders.GetBuilder(__cp_Muoyiu7E0p8LI6QIAKgLU1, 16);
                n6.Spread<n6.Spread<T>> output_46;
                try
                {
                    var i_39 = 0;
                    while (enumerator_35.MoveNext() && enumerator_37.MoveNext())
                    {
                        var splicer_36 = enumerator_35.Current;
                        var splicer_38 = enumerator_37.Current;
                        var i_local_40 = i_39;
                        int __pad_MnzmGUMgYhuPjC84NeyuWn_41 = __slot_MnzmGUMgYhuPjC84NeyuWn;
                        var Result_42 = i_local_40 < Output_33;
                        n11._Operations_.BezierSegmentSpread<T, AdM>(Bezier_Segment_In: splicer_36, Count_In: splicer_38, Positions_Out: out n6.Spread<T> Positions_43);
                        var Output_44 = Positions_43;
                        if (Result_42)
                        {
                            n8._Operations_.SkipLast<T>(Input_In: Positions_43, Count_In: __pad_MnzmGUMgYhuPjC84NeyuWn_41, Output_Out: out Output_44);
                        }

                        builder_45.Add(Output_44);
                        i_39++;
                    }
                }
                finally
                {
                    output_46 = builder_45.Commit();
                }

                n8._Operations_.Flatten<n6.Spread<n6.Spread<T>>, T>(Input_In: output_46, Output_Out: out n6.Spread<T> Output_47);
                Points_13 = Output_47;
                Segment_Count_14 = Segment_Count_4;
            }
            else
            {
                Points_13 = Empty_12;
                Segment_Count_14 = 0;
            }

            Points_Out = Points_13;
            Segment_Count_Out = Segment_Count_14;
            return;
        }

        [n1.ElementAttribute(TracingId = 19017U, DocumentId = "Ve9QvEWam1QMhGjejnDn64", PersistentId = "FO2mVTKk1AMOF6Nx3epBve", Name = "__slot_FO2mVTKk1AMOF6Nx3epBve")]
        public static int __slot_FO2mVTKk1AMOF6Nx3epBve = 1;
        [n1.ElementAttribute(TracingId = 19039U, DocumentId = "Ve9QvEWam1QMhGjejnDn64", PersistentId = "D7p9SwOuph0QP0DmjJaqQr", Name = "__slot_D7p9SwOuph0QP0DmjJaqQr")]
        public static int __slot_D7p9SwOuph0QP0DmjJaqQr = 1;
        [n1.ElementAttribute(TracingId = 18963U, DocumentId = "Ve9QvEWam1QMhGjejnDn64", PersistentId = "MnzmGUMgYhuPjC84NeyuWn", Name = "__slot_MnzmGUMgYhuPjC84NeyuWn")]
        public static int __slot_MnzmGUMgYhuPjC84NeyuWn = 1;
        static _Operations_()
        {
        }
    }
}

namespace _VL_Bezier_Cubic_.Math
{
    [n1.ElementAttribute(TracingId = 19155U, DocumentId = "Ve9QvEWam1QMhGjejnDn64", PersistentId = "VJ0ebNQjX1JPZm7iSrup8l", Name = "BezierPatch_R")]
    [n2.SerializableAttribute]
    public class BezierPatch_R<T> : n1.VLObject, n2.IDisposable
    {
        [n4.CreateNewAttribute]
        public static n10.BezierPatch_R<T> Create<AdM>(n1.NodeContext Node_Context)
            where AdM : struct, n12.IAdaptiveCreateDefault<n10.BezierSegment_R<T>>
        {
            Node_Context = Node_Context.WithIsImmutable(true);
            var instance = new BezierPatch_R<T>(Node_Context, n1.VLObject.NewIdentity());
            return instance.__Create__<AdM>(Node_Context);
        }

        [n4.CreateDefaultAttribute]
        public static n10.BezierPatch_R<T> CreateDefault<AdM>()
            where AdM : struct, n12.IAdaptiveCreateDefault<n10.BezierSegment_R<T>>
        {
            return __DEFAULT__ ?? (__DEFAULT__ = __COMPUTE__());
            n10.BezierPatch_R<T> __COMPUTE__()
            {
                var context = n1.NodeContext.Default.WithIsImmutable(true);
                var instance = new BezierPatch_R<T>(context, n1.VLObject.NewIdentity());
                return instance.__CreateDefault__<AdM>();
            }
        }

        [n1.ElementAttribute(IsAutoGenerated = true)]
        public static n10.BezierPatch_R<T> __DEFAULT__;
        public n10.BezierPatch_R<T> Join<AdM>(n10.BezierSegment_R<T> Control_1_In, n10.BezierSegment_R<T> Control_2_In, n10.BezierSegment_R<T> Control_3_In, n10.BezierSegment_R<T> Control_4_In)
            where AdM : struct, n12.IAdaptiveCreateDefault<n10.BezierSegment_R<T>>
        {
            var w_0 = default(AdM);
            var Output_1 = n10.BezierSegment_R<n10.BezierSegment_R<T>>.CreateDefault<AdM>();
            var Output_2 = Output_1.Join(Control_1_In: Control_1_In, Control_2_In: Control_2_In, Control_3_In: Control_3_In, Control_4_In: Control_4_In);
            n10.BezierSegment_R<n10.BezierSegment_R<T>> __auto_3 = Output_2;
            n10.BezierPatch_R<T> that_4 = this;
            that_4 = Output_2 != this.Curves ? new BezierPatch_R<T>(this)
            {Curves = Output_2} : that_4;
            return that_4;
        }

        public n10.BezierPatch_R<T> Split(out n10.BezierSegment_R<T> Control_1_Out, out n10.BezierSegment_R<T> Control_2_Out, out n10.BezierSegment_R<T> Control_3_Out, out n10.BezierSegment_R<T> Control_4_Out)
        {
            n10.BezierSegment_R<n10.BezierSegment_R<T>> __auto_0 = this.Curves;
            var Output_5 = __auto_0.Split(Control_1_Out: out n10.BezierSegment_R<T> Control_1_1, Control_2_Out: out n10.BezierSegment_R<T> Control_2_2, Control_3_Out: out n10.BezierSegment_R<T> Control_3_3, Control_4_Out: out n10.BezierSegment_R<T> Control_4_4);
            Control_1_Out = Control_1_1;
            Control_2_Out = Control_2_2;
            Control_3_Out = Control_3_3;
            Control_4_Out = Control_4_4;
            return this;
        }

        public n10.BezierPatch_R<T> GetCurves(out n10.BezierSegment_R<n10.BezierSegment_R<T>> Curves_Out)
        {
            n10.BezierSegment_R<n10.BezierSegment_R<T>> __auto_0 = this.Curves;
            Curves_Out = __auto_0;
            return this;
        }

        public n10.BezierPatch_R<T> SetCurves(n10.BezierSegment_R<n10.BezierSegment_R<T>> Curves_In)
        {
            n10.BezierSegment_R<n10.BezierSegment_R<T>> __auto_0 = Curves_In;
            n10.BezierPatch_R<T> that_1 = this;
            that_1 = Curves_In != this.Curves ? new BezierPatch_R<T>(this)
            {Curves = Curves_In} : that_1;
            return that_1;
        }

        public n10.BezierPatch_R<T> __Create__<AdM>(n1.NodeContext Node_Context)
            where AdM : struct, n12.IAdaptiveCreateDefault<n10.BezierSegment_R<T>>
        {
            n7.RuntimeHelpers.EnsureSufficientExecutionStack();
            var w_0 = default(AdM);
            n10.BezierPatch_R<T> that_1 = this;
            this.Curves = n10.BezierSegment_R<n10.BezierSegment_R<T>>.CreateDefault<AdM>();
            return that_1;
        }

        public n10.BezierPatch_R<T> __CreateDefault__<AdM>()
            where AdM : struct, n12.IAdaptiveCreateDefault<n10.BezierSegment_R<T>>
        {
            var w_0 = default(AdM);
            n10.BezierPatch_R<T> that_1 = this;
            this.Curves = n10.BezierSegment_R<n10.BezierSegment_R<T>>.CreateDefault<AdM>();
            return that_1;
        }

        public void Dispose()
        {
            return;
        }

        void n2.IDisposable.Dispose()
        {
            using var __current_services = __GetServiceRegistry__().MakeCurrentIfNone();
            Dispose();
        }

        [n1.ElementAttribute(TracingId = 19188U, DocumentId = "Ve9QvEWam1QMhGjejnDn64", PersistentId = "KKcEpify0IpQNVgIhFnN5t", Name = "Curves")]
        public n10.BezierSegment_R<n10.BezierSegment_R<T>> Curves;
        public BezierPatch_R(n1.NodeContext __context__, uint __identity__): base(__context__, __identity__)
        {
        }

        internal BezierPatch_R(BezierPatch_R<T> other): base(other)
        {
            this.Curves = other.Curves;
        }

        protected override n1.IVLObject __With__(n9.IReadOnlyDictionary<string, n2.Object> values)
        {
            return __WITH__(n1.CompilationHelper.GetValueOrExisting(values, "Curves", in Curves));
        }

        internal BezierPatch_R<T> __WITH__(n10.BezierSegment_R<n10.BezierSegment_R<T>> Curves)
        {
            n10.BezierPatch_R<T> that_0 = this;
            that_0 = Curves != this.Curves ? new BezierPatch_R<T>(this)
            {Curves = Curves} : that_0;
            return that_0;
        }
    }

    [n1.ElementAttribute(TracingId = 19860U, DocumentId = "Ve9QvEWam1QMhGjejnDn64", PersistentId = "Presv6YlgD6PvXuGyfbmE3", Name = "BezierSegment_R")]
    [n2.SerializableAttribute]
    public class BezierSegment_R<T> : n1.VLObject, n2.IDisposable
    {
        [n4.CreateNewAttribute]
        public static n10.BezierSegment_R<T> Create<AdM>(n1.NodeContext Node_Context)
            where AdM : struct, n12.IAdaptiveCreateDefault<T>
        {
            Node_Context = Node_Context.WithIsImmutable(true);
            var instance = new BezierSegment_R<T>(Node_Context, n1.VLObject.NewIdentity());
            return instance.__Create__<AdM>(Node_Context);
        }

        [n4.CreateDefaultAttribute]
        public static n10.BezierSegment_R<T> CreateDefault<AdM>()
            where AdM : struct, n12.IAdaptiveCreateDefault<T>
        {
            return __DEFAULT__ ?? (__DEFAULT__ = __COMPUTE__());
            n10.BezierSegment_R<T> __COMPUTE__()
            {
                var context = n1.NodeContext.Default.WithIsImmutable(true);
                var instance = new BezierSegment_R<T>(context, n1.VLObject.NewIdentity());
                return instance.__CreateDefault__<AdM>();
            }
        }

        [n1.ElementAttribute(IsAutoGenerated = true)]
        public static n10.BezierSegment_R<T> __DEFAULT__;
        public n10.BezierSegment_R<T> Join(T Control_1_In, T Control_2_In, T Control_3_In, T Control_4_In)
        {
            T __auto_0 = Control_1_In;
            bool Apply_1 = true;
            if (Apply_1)
            {
                n14._Operations_.ConstrainTypes<T>(Input_In: Control_1_In, Input_2_In: Control_2_In, Input_3_In: Control_3_In, Input_4_In: Control_4_In);
            }

            T __auto_2 = Control_2_In;
            T __auto_3 = Control_3_In;
            T __auto_4 = Control_4_In;
            n10.BezierSegment_R<T> that_5 = this;
            that_5 = !n9.EqualityComparer<T>.Default.Equals(Control_1_In, this.Control_1) || !n9.EqualityComparer<T>.Default.Equals(Control_2_In, this.Control_2) || !n9.EqualityComparer<T>.Default.Equals(Control_3_In, this.Control_3) || !n9.EqualityComparer<T>.Default.Equals(Control_4_In, this.Control_4) ? new BezierSegment_R<T>(this)
            {Control_1 = Control_1_In, Control_2 = Control_2_In, Control_3 = Control_3_In, Control_4 = Control_4_In} : that_5;
            return that_5;
        }

        public n10.BezierSegment_R<T> Split(out T Control_1_Out, out T Control_2_Out, out T Control_3_Out, out T Control_4_Out)
        {
            T __auto_0 = this.Control_1;
            T __auto_1 = this.Control_2;
            T __auto_2 = this.Control_3;
            T __auto_3 = this.Control_4;
            Control_1_Out = __auto_0;
            Control_2_Out = __auto_1;
            Control_3_Out = __auto_2;
            Control_4_Out = __auto_3;
            return this;
        }

        public n10.BezierSegment_R<T> __Create__<AdM>(n1.NodeContext Node_Context)
            where AdM : struct, n12.IAdaptiveCreateDefault<T>
        {
            n7.RuntimeHelpers.EnsureSufficientExecutionStack();
            var w_0 = default(AdM);
            w_0.CreateDefault(out T __out_0);
            w_0.CreateDefault(out T __out_1);
            w_0.CreateDefault(out T __out_2);
            w_0.CreateDefault(out T __out_3);
            n10.BezierSegment_R<T> that_1 = this;
            this.Control_4 = __out_0;
            this.Control_3 = __out_1;
            this.Control_2 = __out_2;
            this.Control_1 = __out_3;
            return that_1;
        }

        public n10.BezierSegment_R<T> __CreateDefault__<AdM>()
            where AdM : struct, n12.IAdaptiveCreateDefault<T>
        {
            var w_0 = default(AdM);
            w_0.CreateDefault(out T __out_4);
            w_0.CreateDefault(out T __out_5);
            w_0.CreateDefault(out T __out_6);
            w_0.CreateDefault(out T __out_7);
            n10.BezierSegment_R<T> that_1 = this;
            this.Control_4 = __out_4;
            this.Control_3 = __out_5;
            this.Control_2 = __out_6;
            this.Control_1 = __out_7;
            return that_1;
        }

        public void Dispose()
        {
            return;
        }

        void n2.IDisposable.Dispose()
        {
            using var __current_services = __GetServiceRegistry__().MakeCurrentIfNone();
            Dispose();
        }

        [n1.ElementAttribute(TracingId = 19863U, DocumentId = "Ve9QvEWam1QMhGjejnDn64", PersistentId = "OvJVorAH6amNy5mbhJQPAI", Name = "Control 4")]
        public T Control_4;
        [n1.ElementAttribute(TracingId = 19865U, DocumentId = "Ve9QvEWam1QMhGjejnDn64", PersistentId = "Bk95LmPXRyrO48EnVP7YmD", Name = "Control 3")]
        public T Control_3;
        [n1.ElementAttribute(TracingId = 19867U, DocumentId = "Ve9QvEWam1QMhGjejnDn64", PersistentId = "LtsImSRLnsQOrNFY2HoewK", Name = "Control 2")]
        public T Control_2;
        [n1.ElementAttribute(TracingId = 19869U, DocumentId = "Ve9QvEWam1QMhGjejnDn64", PersistentId = "C5IeGgTxDY8PER3bxNH3Bn", Name = "Control 1")]
        public T Control_1;
        public BezierSegment_R(n1.NodeContext __context__, uint __identity__): base(__context__, __identity__)
        {
        }

        internal BezierSegment_R(BezierSegment_R<T> other): base(other)
        {
            this.Control_4 = other.Control_4;
            this.Control_3 = other.Control_3;
            this.Control_2 = other.Control_2;
            this.Control_1 = other.Control_1;
        }

        protected override n1.IVLObject __With__(n9.IReadOnlyDictionary<string, n2.Object> values)
        {
            return __WITH__(n1.CompilationHelper.GetValueOrExisting(values, "Control_4", in Control_4), n1.CompilationHelper.GetValueOrExisting(values, "Control_3", in Control_3), n1.CompilationHelper.GetValueOrExisting(values, "Control_2", in Control_2), n1.CompilationHelper.GetValueOrExisting(values, "Control_1", in Control_1));
        }

        internal BezierSegment_R<T> __WITH__(T Control_4, T Control_3, T Control_2, T Control_1)
        {
            n10.BezierSegment_R<T> that_0 = this;
            that_0 = !n9.EqualityComparer<T>.Default.Equals(Control_4, this.Control_4) || !n9.EqualityComparer<T>.Default.Equals(Control_3, this.Control_3) || !n9.EqualityComparer<T>.Default.Equals(Control_2, this.Control_2) || !n9.EqualityComparer<T>.Default.Equals(Control_1, this.Control_1) ? new BezierSegment_R<T>(this)
            {Control_4 = Control_4, Control_3 = Control_3, Control_2 = Control_2, Control_1 = Control_1} : that_0;
            return that_0;
        }
    }

    [n1.ElementAttribute(TracingId = 27946U, DocumentId = "Ve9QvEWam1QMhGjejnDn64", PersistentId = "NplHhcx6K8ZO8Hnb36cFeT", Name = "VL_Bezier_CubicApplication_NplHhcx6K8ZO8Hnb36cFeT")]
    [n2.SerializableAttribute]
    public class VL_Bezier_CubicApplication_NplHhcx6K8ZO8Hnb36cFeT : n1.VLObject, n2.IDisposable
    {
        [n4.CreateNewAttribute]
        public static n10.VL_Bezier_CubicApplication_NplHhcx6K8ZO8Hnb36cFeT Create(n1.NodeContext Node_Context)
        {
            var instance = new VL_Bezier_CubicApplication_NplHhcx6K8ZO8Hnb36cFeT(Node_Context, n1.VLObject.NewIdentity());
            return instance.__Create__(Node_Context);
        }

        [n4.CreateDefaultAttribute]
        public static n10.VL_Bezier_CubicApplication_NplHhcx6K8ZO8Hnb36cFeT CreateDefault()
        {
            var instance = new VL_Bezier_CubicApplication_NplHhcx6K8ZO8Hnb36cFeT(n1.NodeContext.Default, n1.VLObject.NewIdentity());
            return instance.__CreateDefault__();
        }

        public n10.VL_Bezier_CubicApplication_NplHhcx6K8ZO8Hnb36cFeT Update()
        {
            return this;
        }

        public n10.VL_Bezier_CubicApplication_NplHhcx6K8ZO8Hnb36cFeT __Create__(n1.NodeContext Node_Context)
        {
            n7.RuntimeHelpers.EnsureSufficientExecutionStack();
            return this;
        }

        public n10.VL_Bezier_CubicApplication_NplHhcx6K8ZO8Hnb36cFeT __CreateDefault__()
        {
            return this;
        }

        public void Dispose()
        {
            return;
        }

        void n2.IDisposable.Dispose()
        {
            using var __current_services = __GetServiceRegistry__().MakeCurrentIfNone();
            Dispose();
        }

        public VL_Bezier_CubicApplication_NplHhcx6K8ZO8Hnb36cFeT(n1.NodeContext __context__, uint __identity__): base(__context__, __identity__)
        {
        }

        internal VL_Bezier_CubicApplication_NplHhcx6K8ZO8Hnb36cFeT(VL_Bezier_CubicApplication_NplHhcx6K8ZO8Hnb36cFeT other): base(other)
        {
        }

        protected override n1.IVLObject __With__(n9.IReadOnlyDictionary<string, n2.Object> values)
        {
            return __WITH__();
        }

        internal VL_Bezier_CubicApplication_NplHhcx6K8ZO8Hnb36cFeT __WITH__()
        {
            return this;
        }
    }
}

namespace _VL_Bezier_Cubic_.Math.BezierPatch
{
    [n1.ElementAttribute(TracingId = 18743U, DocumentId = "Ve9QvEWam1QMhGjejnDn64", Name = "_Operations_")]
    public static partial class _Operations_
    {
        public static void Slice<T, AdM>(n10.BezierPatch_R<T> Input_In, float Scalar_In, out n6.Spread<n10.BezierPatch_R<T>> Output_Out)
            where AdM : struct, n12.IAdaptiveCreateDefault<n10.BezierSegment_R<T>>, n13.IAdaptiveLerp<n10.BezierSegment_R<T>>
        {
            n6.Spread<n10.BezierPatch_R<T>> __cp_RXQYOSknkvTOQ10aCt5TLn = n8._Operations_.CreateDefault<n10.BezierPatch_R<T>>();
            var w_0 = default(AdM);
            var Output_2 = Input_In.GetCurves(Curves_Out: out n10.BezierSegment_R<n10.BezierSegment_R<T>> Curves_1);
            n11._Operations_.Slice<n10.BezierSegment_R<T>, AdM>(Input_In: Curves_1, Scalar_In: Scalar_In, Output_Out: out n6.Spread<n10.BezierSegment_R<n10.BezierSegment_R<T>>> Output_3);
            var builder_10 = n4.CollectionBuilders.GetBuilder(__cp_RXQYOSknkvTOQ10aCt5TLn, 16);
            n6.Spread<n10.BezierPatch_R<T>> output_11;
            try
            {
                var i_6 = 0;
                foreach (var item_4 in n4.CollectionExtensions.AsSpan(Output_3))
                {
                    var splicer_5 = item_4;
                    var i_local_7 = i_6;
                    var Output_8 = n10.BezierPatch_R<T>.CreateDefault<AdM>();
                    var Output_9 = Output_8.SetCurves(Curves_In: splicer_5);
                    builder_10.Add(Output_9);
                    i_6++;
                }
            }
            finally
            {
                output_11 = builder_10.Commit();
            }

            Output_Out = output_11;
            return;
        }

        public static void Sample<T, AdM>(n10.BezierPatch_R<T> Input_In, float Scalar_In, out n10.BezierSegment_R<T> Output_Out)
            where AdM : struct, n13.IAdaptiveLerp<n10.BezierSegment_R<T>>
        {
            var w_0 = default(AdM);
            var Output_2 = Input_In.GetCurves(Curves_Out: out n10.BezierSegment_R<n10.BezierSegment_R<T>> Curves_1);
            n11._Operations_.Sample<n10.BezierSegment_R<T>, AdM>(Input_In: Curves_1, Scalar_In: Scalar_In, Output_Out: out n10.BezierSegment_R<T> Output_3);
            Output_Out = Output_3;
            return;
        }

        public static void Append<T, AdM>(n10.BezierPatch_R<T> Input_In, n10.BezierSegment_R<T> Control_3_In, n10.BezierSegment_R<T> Control_4_In, out n10.BezierSegment_R<n10.BezierSegment_R<T>> Output_Out)
            where AdM : struct, n12.IAdaptiveCreateDefault<n10.BezierSegment_R<T>>, n13.IAdaptiveOperatorMinus<n10.BezierSegment_R<T>>, n13.IAdaptiveOperatorPlus<n10.BezierSegment_R<T>>
        {
            var w_0 = default(AdM);
            var Output_2 = Input_In.GetCurves(Curves_Out: out n10.BezierSegment_R<n10.BezierSegment_R<T>> Curves_1);
            n11._Operations_.Append<n10.BezierSegment_R<T>, AdM>(Input_In: Curves_1, Control_3_In: Control_3_In, Control_4_In: Control_4_In, Output_Out: out n10.BezierSegment_R<n10.BezierSegment_R<T>> Output_3);
            Output_Out = Output_3;
            return;
        }

        public static void Prepend<T, AdM>(n10.BezierSegment_R<T> Control_1_In, n10.BezierSegment_R<T> Control_2_In, n10.BezierPatch_R<T> Input_In, out n10.BezierSegment_R<n10.BezierSegment_R<T>> Output_Out)
            where AdM : struct, n12.IAdaptiveCreateDefault<n10.BezierSegment_R<T>>, n13.IAdaptiveOperatorMinus<n10.BezierSegment_R<T>>, n13.IAdaptiveOperatorPlus<n10.BezierSegment_R<T>>
        {
            var w_0 = default(AdM);
            var Output_2 = Input_In.GetCurves(Curves_Out: out n10.BezierSegment_R<n10.BezierSegment_R<T>> Curves_1);
            n11._Operations_.Prepend<n10.BezierSegment_R<T>, AdM>(Control_1_In: Control_1_In, Control_2_In: Control_2_In, Input_In: Curves_1, Output_Out: out n10.BezierSegment_R<n10.BezierSegment_R<T>> Output_3);
            Output_Out = Output_3;
            return;
        }

        public static void Connect<T, AdM>(n10.BezierPatch_R<T> Input_In, n10.BezierPatch_R<T> Input_2_In, out n10.BezierSegment_R<n10.BezierSegment_R<T>> Output_Out)
            where AdM : struct, n12.IAdaptiveCreateDefault<n10.BezierSegment_R<T>>, n13.IAdaptiveOperatorMinus<n10.BezierSegment_R<T>>, n13.IAdaptiveOperatorPlus<n10.BezierSegment_R<T>>
        {
            var w_0 = default(AdM);
            var Output_2 = Input_In.GetCurves(Curves_Out: out n10.BezierSegment_R<n10.BezierSegment_R<T>> Curves_1);
            var Output_4 = Input_2_In.GetCurves(Curves_Out: out n10.BezierSegment_R<n10.BezierSegment_R<T>> Curves_3);
            n11._Operations_.Connect<n10.BezierSegment_R<T>, AdM>(Input_In: Curves_1, Input_2_In: Curves_3, Output_Out: out n10.BezierSegment_R<n10.BezierSegment_R<T>> Output_5);
            Output_Out = Output_5;
            return;
        }

        public static void SamplePoint<T, AdM>(n10.BezierPatch_R<T> Input_In, float Outer_In, float Inner_In, out T Output_Out)
            where AdM : struct, n13.IAdaptiveLerp<T>, n13.IAdaptiveLerp<n10.BezierSegment_R<T>>
        {
            var w_0 = default(AdM);
            var Output_2 = Input_In.GetCurves(Curves_Out: out n10.BezierSegment_R<n10.BezierSegment_R<T>> Curves_1);
            n11._Operations_.Sample<n10.BezierSegment_R<T>, AdM>(Input_In: Curves_1, Scalar_In: Outer_In, Output_Out: out n10.BezierSegment_R<T> Output_3);
            n11._Operations_.Sample<T, AdM>(Input_In: Output_3, Scalar_In: Inner_In, Output_Out: out T Output_4);
            Output_Out = Output_4;
            return;
        }

        public static void BezierPatchSpread(n10.BezierPatch_R<n15.Vector3> Bezier_In, int Outer_In, int Inner_In, out n6.Spread<n15.Vector3> Positions_Out, out n6.Spread<n15.Vector3> Normals_Out)
        {
            n6.Spread<n6.Spread<n15.Vector3>> __cp_OdVj0jFvaH3MrxHjMj9006 = n8._Operations_.CreateDefault<n6.Spread<n15.Vector3>>();
            n6.Spread<n6.Spread<n15.Vector3>> __cp_Oi0vNsF1uXYMKGUjLW5SQH = n8._Operations_.CreateDefault<n6.Spread<n15.Vector3>>();
            n6.Spread<n6.Spread<n15.Vector3>> __cp_BYVieoMn7mkPwI5G6N5LZb = n8._Operations_.CreateDefault<n6.Spread<n15.Vector3>>();
            int __pad_BI0H5PSB0KSNy5KL8Brxs4_0 = __slot_BI0H5PSB0KSNy5KL8Brxs4;
            int __pad_TkeHCJsRRo0MYXRuPgD3rx_1 = __slot_TkeHCJsRRo0MYXRuPgD3rx;
            bool Apply_2 = true;
            var Output_3 = Outer_In;
            if (Apply_2)
            {
                var Output_4 = Outer_In + __pad_BI0H5PSB0KSNy5KL8Brxs4_0;
                Output_3 = Output_4;
            }

            bool Apply_5 = true;
            var Output_6 = Outer_In;
            if (Apply_5)
            {
                var Output_7 = Outer_In - __pad_BI0H5PSB0KSNy5KL8Brxs4_0;
                Output_6 = Output_7;
            }

            float Input_2_8 = (float)Output_6;
            bool Apply_9 = true;
            var Output_10 = Inner_In;
            if (Apply_9)
            {
                var Output_11 = Inner_In - __pad_BI0H5PSB0KSNy5KL8Brxs4_0;
                Output_10 = Output_11;
            }

            float Input_2_12 = (float)Output_10;
            var builder_35 = n4.CollectionBuilders.GetBuilder(__cp_OdVj0jFvaH3MrxHjMj9006, 16);
            n6.Spread<n6.Spread<n15.Vector3>> output_36;
            var builder_37 = n4.CollectionBuilders.GetBuilder(__cp_Oi0vNsF1uXYMKGUjLW5SQH, 16);
            n6.Spread<n6.Spread<n15.Vector3>> output_38;
            try
            {
                for (var i_13 = 0; i_13 < Output_3; i_13++)
                {
                    var i_local_14 = i_13;
                    n6.Spread<n15.Vector3> __cp_Q7IVtumuO2ENDC5E4dHlnS = n8._Operations_.CreateDefault<n15.Vector3>();
                    n6.Spread<n15.Vector3> __cp_GmEFs6XUP1rLElycMwDHhU = n8._Operations_.CreateDefault<n15.Vector3>();
                    float Input_15 = (float)i_local_14;
                    bool Apply_16 = true;
                    var Output_17 = Input_15;
                    if (Apply_16)
                    {
                        var Output_18 = (float)Input_15 / Input_2_8;
                        Output_17 = Output_18;
                    }

                    n17._Operations_.Sample<n15.Vector3, n16.__AdaptiveImplementations__Ve9QvEWam1QMhGjejnDn64>(Input_In: Bezier_In, Scalar_In: Output_17, Output_Out: out n10.BezierSegment_R<n15.Vector3> Output_19);
                    n15.Vector3 accumulator_21 = n18._Operations_.CreateDefault();
                    var builder_31 = n4.CollectionBuilders.GetBuilder(__cp_Q7IVtumuO2ENDC5E4dHlnS, 16);
                    n6.Spread<n15.Vector3> output_32;
                    var builder_33 = n4.CollectionBuilders.GetBuilder(__cp_GmEFs6XUP1rLElycMwDHhU, 16);
                    n6.Spread<n15.Vector3> output_34;
                    try
                    {
                        for (var i_20 = 0; i_20 < Inner_In; i_20++)
                        {
                            var i_local_22 = i_20;
                            float Input_23 = (float)i_local_22;
                            bool Apply_24 = true;
                            var Output_25 = Input_23;
                            if (Apply_24)
                            {
                                var Output_26 = (float)Input_23 / Input_2_12;
                                Output_25 = Output_26;
                            }

                            n11._Operations_.Sample<n15.Vector3, n16.__AdaptiveImplementations__Ve9QvEWam1QMhGjejnDn64>(Input_In: Output_19, Scalar_In: Output_25, Output_Out: out n15.Vector3 Output_27);
                            bool Apply_28 = true;
                            var Output_29 = Output_27;
                            if (Apply_28)
                            {
                                n15.Vector3.Subtract(left: ref Output_27, right: ref accumulator_21, result: out n15.Vector3 Output_30);
                                Output_29 = Output_30;
                            }

                            builder_31.Add(Output_27);
                            builder_33.Add(Output_29);
                            accumulator_21 = Output_27;
                        }
                    }
                    finally
                    {
                        output_32 = builder_31.Commit();
                        output_34 = builder_33.Commit();
                    }

                    builder_35.Add(output_32);
                    builder_37.Add(output_34);
                }
            }
            finally
            {
                output_36 = builder_35.Commit();
                output_38 = builder_37.Commit();
            }

            bool Apply_39 = true;
            var Output_40 = output_36;
            if (Apply_39)
            {
                n8._Operations_.GetSpread<n6.Spread<n15.Vector3>>(Input_In: output_36, Index_In: __pad_TkeHCJsRRo0MYXRuPgD3rx_1, Count_In: Outer_In, Output_Out: out Output_40);
            }

            int Index_41 = 0;
            bool Apply_42 = true;
            var Output_43 = output_36;
            if (Apply_42)
            {
                n8._Operations_.GetSpread<n6.Spread<n15.Vector3>>(Input_In: output_36, Index_In: Index_41, Count_In: Outer_In, Output_Out: out Output_43);
            }

            n8._Operations_.Flatten<n6.Spread<n6.Spread<n15.Vector3>>, n15.Vector3>(Input_In: Output_43, Output_Out: out n6.Spread<n15.Vector3> Output_44);
            int Index_45 = 0;
            bool Apply_46 = true;
            var Output_47 = output_38;
            if (Apply_46)
            {
                n8._Operations_.GetSpread<n6.Spread<n15.Vector3>>(Input_In: output_38, Index_In: Index_45, Count_In: Outer_In, Output_Out: out Output_47);
            }

            var enumerator_48 = n4.CollectionExtensions.AsSpan(Output_47).GetEnumerator();
            var enumerator_50 = n4.CollectionExtensions.AsSpan(Output_43).GetEnumerator();
            var enumerator_52 = n4.CollectionExtensions.AsSpan(Output_40).GetEnumerator();
            var builder_74 = n4.CollectionBuilders.GetBuilder(__cp_BYVieoMn7mkPwI5G6N5LZb, 16);
            n6.Spread<n6.Spread<n15.Vector3>> output_75;
            try
            {
                var i_54 = 0;
                while (enumerator_48.MoveNext() && enumerator_50.MoveNext() && enumerator_52.MoveNext())
                {
                    var splicer_49 = enumerator_48.Current;
                    var splicer_51 = enumerator_50.Current;
                    var splicer_53 = enumerator_52.Current;
                    var i_local_55 = i_54;
                    n6.Spread<n15.Vector3> __cp_AJ3utNn1CcNMndSxReSytc = n8._Operations_.CreateDefault<n15.Vector3>();
                    n6.Spread<n15.Vector3> __cp_QBe94YIUFsyQOzZIckfkqu = n8._Operations_.CreateDefault<n15.Vector3>();
                    var enumerator_56 = n4.CollectionExtensions.AsSpan(splicer_49).GetEnumerator();
                    var enumerator_58 = n4.CollectionExtensions.AsSpan(splicer_51).GetEnumerator();
                    var enumerator_60 = n4.CollectionExtensions.AsSpan(splicer_53).GetEnumerator();
                    var builder_70 = n4.CollectionBuilders.GetBuilder(__cp_AJ3utNn1CcNMndSxReSytc, 16);
                    n6.Spread<n15.Vector3> output_71;
                    var builder_72 = n4.CollectionBuilders.GetBuilder(__cp_QBe94YIUFsyQOzZIckfkqu, 16);
                    n6.Spread<n15.Vector3> output_73;
                    try
                    {
                        var i_62 = 0;
                        while (enumerator_56.MoveNext() && enumerator_58.MoveNext() && enumerator_60.MoveNext())
                        {
                            var splicer_57 = enumerator_56.Current;
                            var splicer_59 = enumerator_58.Current;
                            var splicer_61 = enumerator_60.Current;
                            var i_local_63 = i_62;
                            bool Apply_64 = true;
                            var Output_65 = splicer_61;
                            if (Apply_64)
                            {
                                n15.Vector3.Subtract(left: ref splicer_61, right: ref splicer_59, result: out n15.Vector3 Output_66);
                                Output_65 = Output_66;
                            }

                            bool Apply_67 = true;
                            var Output_68 = Output_65;
                            if (Apply_67)
                            {
                                n15.Vector3.Cross(left: ref Output_65, right: ref splicer_57, result: out n15.Vector3 Output_69);
                                Output_68 = Output_69;
                            }

                            builder_70.Add(Output_68);
                            builder_72.Add(Output_65);
                            i_62++;
                        }
                    }
                    finally
                    {
                        output_71 = builder_70.Commit();
                        output_73 = builder_72.Commit();
                    }

                    builder_74.Add(output_71);
                    i_54++;
                }
            }
            finally
            {
                output_75 = builder_74.Commit();
            }

            n8._Operations_.Flatten<n6.Spread<n6.Spread<n15.Vector3>>, n15.Vector3>(Input_In: output_75, Output_Out: out n6.Spread<n15.Vector3> Output_76);
            Positions_Out = Output_44;
            Normals_Out = Output_76;
            return;
        }

        [n1.ElementAttribute(TracingId = 19487U, DocumentId = "Ve9QvEWam1QMhGjejnDn64", PersistentId = "BI0H5PSB0KSNy5KL8Brxs4", Name = "__slot_BI0H5PSB0KSNy5KL8Brxs4")]
        public static int __slot_BI0H5PSB0KSNy5KL8Brxs4 = 1;
        [n1.ElementAttribute(TracingId = 19490U, DocumentId = "Ve9QvEWam1QMhGjejnDn64", PersistentId = "TkeHCJsRRo0MYXRuPgD3rx", Name = "__slot_TkeHCJsRRo0MYXRuPgD3rx")]
        public static int __slot_TkeHCJsRRo0MYXRuPgD3rx = 1;
        static _Operations_()
        {
        }
    }
}

namespace _VL_Bezier_Cubic_.Math.BezierSegment
{
    [n1.ElementAttribute(TracingId = 18743U, DocumentId = "Ve9QvEWam1QMhGjejnDn64", Name = "_Operations_")]
    public static partial class _Operations_
    {
        public static void Append<T, AdM>(n10.BezierSegment_R<T> Input_In, T Control_3_In, T Control_4_In, out n10.BezierSegment_R<T> Output_Out)
            where AdM : struct, n13.IAdaptiveOperatorMinus<T>, n12.IAdaptiveCreateDefault<T>, n13.IAdaptiveOperatorPlus<T>
        {
            var w_0 = default(AdM);
            var Output_5 = Input_In.Split(Control_1_Out: out T Control_1_1, Control_2_Out: out T Control_2_2, Control_3_Out: out T Control_3_3, Control_4_Out: out T Control_4_4);
            bool Apply_6 = true;
            var Output_7 = Control_4_4;
            if (Apply_6)
            {
                w_0.OperatorMinus(Input_In: Control_4_4, Input_2_In: Control_3_3, Output_Out: out Output_7);
            }

            var Output_8 = n10.BezierSegment_R<T>.CreateDefault<AdM>();
            bool Apply_9 = true;
            var Output_10 = Control_4_4;
            if (Apply_9)
            {
                w_0.OperatorPlus(Input_In: Control_4_4, Input_2_In: Output_7, Output_Out: out Output_10);
            }

            bool Apply_11 = true;
            var Output_12 = Output_8;
            if (Apply_11)
            {
                Output_12 = Output_8.Join(Control_1_In: Control_4_4, Control_2_In: Output_10, Control_3_In: Control_3_In, Control_4_In: Control_4_In);
            }

            Output_Out = Output_12;
            return;
        }

        public static void Sample<T, AdM>(n10.BezierSegment_R<T> Input_In, float Scalar_In, out T Output_Out)
            where AdM : struct, n13.IAdaptiveLerp<T>
        {
            var w_0 = default(AdM);
            var Output_5 = Input_In.Split(Control_1_Out: out T Control_1_1, Control_2_Out: out T Control_2_2, Control_3_Out: out T Control_3_3, Control_4_Out: out T Control_4_4);
            bool Apply_6 = true;
            var Output_7 = Control_1_1;
            if (Apply_6)
            {
                w_0.Lerp(Input_In: Control_1_1, Input_2_In: Control_2_2, Scalar_In: Scalar_In, Output_Out: out Output_7);
            }

            bool Apply_8 = true;
            var Output_9 = Control_2_2;
            if (Apply_8)
            {
                w_0.Lerp(Input_In: Control_2_2, Input_2_In: Control_3_3, Scalar_In: Scalar_In, Output_Out: out Output_9);
            }

            bool Apply_10 = true;
            var Output_11 = Control_3_3;
            if (Apply_10)
            {
                w_0.Lerp(Input_In: Control_3_3, Input_2_In: Control_4_4, Scalar_In: Scalar_In, Output_Out: out Output_11);
            }

            bool Apply_12 = true;
            var Output_13 = Output_9;
            if (Apply_12)
            {
                w_0.Lerp(Input_In: Output_9, Input_2_In: Output_11, Scalar_In: Scalar_In, Output_Out: out Output_13);
            }

            bool Apply_14 = true;
            var Output_15 = Output_7;
            if (Apply_14)
            {
                w_0.Lerp(Input_In: Output_7, Input_2_In: Output_9, Scalar_In: Scalar_In, Output_Out: out Output_15);
            }

            bool Apply_16 = true;
            var Output_17 = Output_15;
            if (Apply_16)
            {
                w_0.Lerp(Input_In: Output_15, Input_2_In: Output_13, Scalar_In: Scalar_In, Output_Out: out Output_17);
            }

            Output_Out = Output_17;
            return;
        }

        public static void Prepend<T, AdM>(T Control_1_In, T Control_2_In, n10.BezierSegment_R<T> Input_In, out n10.BezierSegment_R<T> Output_Out)
            where AdM : struct, n13.IAdaptiveOperatorMinus<T>, n12.IAdaptiveCreateDefault<T>, n13.IAdaptiveOperatorPlus<T>
        {
            var w_0 = default(AdM);
            var Output_1 = n10.BezierSegment_R<T>.CreateDefault<AdM>();
            var Output_6 = Input_In.Split(Control_1_Out: out T Control_1_2, Control_2_Out: out T Control_2_3, Control_3_Out: out T Control_3_4, Control_4_Out: out T Control_4_5);
            bool Apply_7 = true;
            var Output_8 = Control_1_2;
            if (Apply_7)
            {
                w_0.OperatorMinus(Input_In: Control_1_2, Input_2_In: Control_2_3, Output_Out: out Output_8);
            }

            bool Apply_9 = true;
            var Output_10 = Control_1_2;
            if (Apply_9)
            {
                w_0.OperatorPlus(Input_In: Control_1_2, Input_2_In: Output_8, Output_Out: out Output_10);
            }

            bool Apply_11 = true;
            var Output_12 = Output_1;
            if (Apply_11)
            {
                Output_12 = Output_1.Join(Control_1_In: Control_1_In, Control_2_In: Control_2_In, Control_3_In: Output_10, Control_4_In: Control_1_2);
            }

            Output_Out = Output_12;
            return;
        }

        public static void Slice<T, AdM>(n10.BezierSegment_R<T> Input_In, float Scalar_In, out n6.Spread<n10.BezierSegment_R<T>> Output_Out)
            where AdM : struct, n12.IAdaptiveCreateDefault<T>, n13.IAdaptiveLerp<T>
        {
            n6.Spread<n10.BezierSegment_R<T>> __pin_group_Input_In_GLKhzQPaBDkPzbiLwX2yPT = default(n6.Spread<n10.BezierSegment_R<T>>);
            var w_0 = default(AdM);
            var Output_5 = Input_In.Split(Control_1_Out: out T Control_1_1, Control_2_Out: out T Control_2_2, Control_3_Out: out T Control_3_3, Control_4_Out: out T Control_4_4);
            bool Apply_6 = true;
            var Output_7 = Control_1_1;
            if (Apply_6)
            {
                w_0.Lerp(Input_In: Control_1_1, Input_2_In: Control_2_2, Scalar_In: Scalar_In, Output_Out: out Output_7);
            }

            bool Apply_8 = true;
            var Output_9 = Control_2_2;
            if (Apply_8)
            {
                w_0.Lerp(Input_In: Control_2_2, Input_2_In: Control_3_3, Scalar_In: Scalar_In, Output_Out: out Output_9);
            }

            bool Apply_10 = true;
            var Output_11 = Control_3_3;
            if (Apply_10)
            {
                w_0.Lerp(Input_In: Control_3_3, Input_2_In: Control_4_4, Scalar_In: Scalar_In, Output_Out: out Output_11);
            }

            var Output_12 = n10.BezierSegment_R<T>.CreateDefault<AdM>();
            bool Apply_13 = true;
            var Output_14 = Output_7;
            if (Apply_13)
            {
                w_0.Lerp(Input_In: Output_7, Input_2_In: Output_9, Scalar_In: Scalar_In, Output_Out: out Output_14);
            }

            bool Apply_15 = true;
            var Output_16 = Output_9;
            if (Apply_15)
            {
                w_0.Lerp(Input_In: Output_9, Input_2_In: Output_11, Scalar_In: Scalar_In, Output_Out: out Output_16);
            }

            bool Apply_17 = true;
            var Output_18 = Output_14;
            if (Apply_17)
            {
                w_0.Lerp(Input_In: Output_14, Input_2_In: Output_16, Scalar_In: Scalar_In, Output_Out: out Output_18);
            }

            bool Apply_19 = true;
            var Output_20 = Output_12;
            if (Apply_19)
            {
                Output_20 = Output_12.Join(Control_1_In: Output_18, Control_2_In: Output_16, Control_3_In: Output_11, Control_4_In: Control_4_4);
            }

            var Output_21 = n10.BezierSegment_R<T>.CreateDefault<AdM>();
            bool Apply_22 = true;
            var Output_23 = Output_21;
            if (Apply_22)
            {
                Output_23 = Output_21.Join(Control_1_In: Control_1_1, Control_2_In: Output_7, Control_3_In: Output_14, Control_4_In: Output_18);
            }

            var builder_24 = n4.CollectionBuilders.GetBuilder(__pin_group_Input_In_GLKhzQPaBDkPzbiLwX2yPT, 2);
            builder_24.Add(Output_23);
            builder_24.Add(Output_20);
            var __pin_group_Input_In_GLKhzQPaBDkPzbiLwX2yPT_25 = builder_24.Commit();
            n8._Operations_.Cons<n10.BezierSegment_R<T>>(Input_In: __pin_group_Input_In_GLKhzQPaBDkPzbiLwX2yPT_25, Result_Out: out n6.Spread<n10.BezierSegment_R<T>> Result_26);
            Output_Out = Result_26;
            return;
        }

        public static void Connect<T, AdM>(n10.BezierSegment_R<T> Input_In, n10.BezierSegment_R<T> Input_2_In, out n10.BezierSegment_R<T> Output_Out)
            where AdM : struct, n13.IAdaptiveOperatorMinus<T>, n12.IAdaptiveCreateDefault<T>, n13.IAdaptiveOperatorPlus<T>
        {
            var w_0 = default(AdM);
            var Output_5 = Input_In.Split(Control_1_Out: out T Control_1_1, Control_2_Out: out T Control_2_2, Control_3_Out: out T Control_3_3, Control_4_Out: out T Control_4_4);
            bool Apply_6 = true;
            var Output_7 = Control_4_4;
            if (Apply_6)
            {
                w_0.OperatorMinus(Input_In: Control_4_4, Input_2_In: Control_3_3, Output_Out: out Output_7);
            }

            var Output_8 = n10.BezierSegment_R<T>.CreateDefault<AdM>();
            bool Apply_9 = true;
            var Output_10 = Control_4_4;
            if (Apply_9)
            {
                w_0.OperatorPlus(Input_In: Control_4_4, Input_2_In: Output_7, Output_Out: out Output_10);
            }

            var Output_15 = Input_2_In.Split(Control_1_Out: out T Control_1_11, Control_2_Out: out T Control_2_12, Control_3_Out: out T Control_3_13, Control_4_Out: out T Control_4_14);
            bool Apply_16 = true;
            var Output_17 = Control_1_11;
            if (Apply_16)
            {
                w_0.OperatorMinus(Input_In: Control_1_11, Input_2_In: Control_2_12, Output_Out: out Output_17);
            }

            bool Apply_18 = true;
            var Output_19 = Control_1_11;
            if (Apply_18)
            {
                w_0.OperatorPlus(Input_In: Control_1_11, Input_2_In: Output_17, Output_Out: out Output_19);
            }

            bool Apply_20 = true;
            var Output_21 = Output_8;
            if (Apply_20)
            {
                Output_21 = Output_8.Join(Control_1_In: Control_4_4, Control_2_In: Output_10, Control_3_In: Output_19, Control_4_In: Control_1_11);
            }

            Output_Out = Output_21;
            return;
        }

        public static void Lerp<T, AdM>(n10.BezierSegment_R<T> Input_In, n10.BezierSegment_R<T> Input_2_In, float Scalar_In, out n10.BezierSegment_R<T> Output_Out)
            where AdM : struct, n12.IAdaptiveCreateDefault<T>, n13.IAdaptiveLerp<T>
        {
            var w_0 = default(AdM);
            var Output_5 = Input_In.Split(Control_1_Out: out T Control_1_1, Control_2_Out: out T Control_2_2, Control_3_Out: out T Control_3_3, Control_4_Out: out T Control_4_4);
            var Output_10 = Input_2_In.Split(Control_1_Out: out T Control_1_6, Control_2_Out: out T Control_2_7, Control_3_Out: out T Control_3_8, Control_4_Out: out T Control_4_9);
            bool Apply_11 = true;
            var Output_12 = Control_1_1;
            if (Apply_11)
            {
                w_0.Lerp(Input_In: Control_1_1, Input_2_In: Control_1_6, Scalar_In: Scalar_In, Output_Out: out Output_12);
            }

            bool Apply_13 = true;
            var Output_14 = Control_2_2;
            if (Apply_13)
            {
                w_0.Lerp(Input_In: Control_2_2, Input_2_In: Control_2_7, Scalar_In: Scalar_In, Output_Out: out Output_14);
            }

            bool Apply_15 = true;
            var Output_16 = Control_4_4;
            if (Apply_15)
            {
                w_0.Lerp(Input_In: Control_4_4, Input_2_In: Control_4_9, Scalar_In: Scalar_In, Output_Out: out Output_16);
            }

            var Output_17 = n10.BezierSegment_R<T>.CreateDefault<AdM>();
            bool Apply_18 = true;
            var Output_19 = Control_3_3;
            if (Apply_18)
            {
                w_0.Lerp(Input_In: Control_3_3, Input_2_In: Control_3_8, Scalar_In: Scalar_In, Output_Out: out Output_19);
            }

            var Output_20 = Output_17.Join(Control_1_In: Output_12, Control_2_In: Output_14, Control_3_In: Output_19, Control_4_In: Output_16);
            Output_Out = Output_20;
            return;
        }

        public static void BezierSegmentSpread<T, AdM>(n10.BezierSegment_R<T> Bezier_Segment_In, int Count_In, out n6.Spread<T> Positions_Out)
            where AdM : struct, n13.IAdaptiveLerp<T>
        {
            n6.Spread<T> __cp_UKZCpo8RvpqNiOm3lqRZFb = n8._Operations_.CreateDefault<T>();
            var w_0 = default(AdM);
            int __pad_N4SuXdBqUMvNuYX47E6f1Z_1 = __slot_N4SuXdBqUMvNuYX47E6f1Z;
            bool Apply_2 = true;
            var Output_3 = Count_In;
            if (Apply_2)
            {
                var Output_4 = Count_In - __pad_N4SuXdBqUMvNuYX47E6f1Z_1;
                Output_3 = Output_4;
            }

            float Input_2_5 = (float)Output_3;
            var builder_13 = n4.CollectionBuilders.GetBuilder(__cp_UKZCpo8RvpqNiOm3lqRZFb, 16);
            n6.Spread<T> output_14;
            try
            {
                for (var i_6 = 0; i_6 < Count_In; i_6++)
                {
                    var i_local_7 = i_6;
                    float Input_8 = (float)i_local_7;
                    bool Apply_9 = true;
                    var Output_10 = Input_8;
                    if (Apply_9)
                    {
                        var Output_11 = (float)Input_8 / Input_2_5;
                        Output_10 = Output_11;
                    }

                    n11._Operations_.Sample<T, AdM>(Input_In: Bezier_Segment_In, Scalar_In: Output_10, Output_Out: out T Output_12);
                    builder_13.Add(Output_12);
                }
            }
            finally
            {
                output_14 = builder_13.Commit();
            }

            Positions_Out = output_14;
            return;
        }

        public static void BezierSegmentLength<T, AdM>(n10.BezierSegment_R<T> Bezier_Segment_In, int Count_In, out n6.Spread<T> Sampled_Points_Out, out n6.Spread<float> Partial_Lengths_Out, out float Total_Length_Out)
            where AdM : struct, n13.IAdaptiveOperatorMinus<T>, n12.IAdaptiveCreateDefault<T>, n13.IAdaptiveLerp<T>, n13.IAdaptiveLength<T>
        {
            n6.Spread<float> __cp_HH3qydm10UDP0OD7I9ADrj = n8._Operations_.CreateDefault<float>();
            var w_0 = default(AdM);
            n11._Operations_.BezierSegmentSpread<T, AdM>(Bezier_Segment_In: Bezier_Segment_In, Count_In: Count_In, Positions_Out: out n6.Spread<T> Positions_1);
            n8._Operations_.Count<T>(Input_In: Positions_1, Count_Out: out int Count_2);
            float accumulator_4 = 0F;
            var builder_20 = n4.CollectionBuilders.GetBuilder(__cp_HH3qydm10UDP0OD7I9ADrj, 16);
            n6.Spread<float> output_21;
            try
            {
                for (var i_3 = 0; i_3 < Count_2; i_3++)
                {
                    var i_local_5 = i_3;
                    int __pad_Jme99DIsa7RNJ71zCAIgjQ_6 = __slot_Jme99DIsa7RNJ71zCAIgjQ;
                    w_0.CreateDefault(Output_Out: out T Output_7);
                    n8._Operations_.GetSlice<T>(Input_In: Positions_1, Default_Value_In: Output_7, Index_In: i_local_5, Result_Out: out T Result_8);
                    w_0.CreateDefault(Output_Out: out T Output_9);
                    bool Apply_10 = true;
                    var Output_11 = i_local_5;
                    if (Apply_10)
                    {
                        var Output_12 = i_local_5 + __pad_Jme99DIsa7RNJ71zCAIgjQ_6;
                        Output_11 = Output_12;
                    }

                    n8._Operations_.GetSlice<T>(Input_In: Positions_1, Default_Value_In: Output_9, Index_In: Output_11, Result_Out: out T Result_13);
                    bool Apply_14 = true;
                    var Output_15 = Result_8;
                    if (Apply_14)
                    {
                        w_0.OperatorMinus(Input_In: Result_8, Input_2_In: Result_13, Output_Out: out Output_15);
                    }

                    w_0.Length(Input_In: Output_15, Result_Out: out float Result_16);
                    bool Apply_17 = true;
                    var Output_18 = Result_16;
                    if (Apply_17)
                    {
                        var Output_19 = Result_16 + accumulator_4;
                        Output_18 = Output_19;
                    }

                    builder_20.Add(Result_16);
                    accumulator_4 = Output_18;
                }
            }
            finally
            {
                output_21 = builder_20.Commit();
            }

            int Index_22 = 0;
            float Value_23 = 0F;
            bool Apply_24 = true;
            var Output_25 = output_21;
            if (Apply_24)
            {
                n8._Operations_.InsertSlice<float>(Input_In: output_21, Index_In: Index_22, Value_In: Value_23, Output_Out: out Output_25);
            }

            Sampled_Points_Out = Positions_1;
            Partial_Lengths_Out = Output_25;
            Total_Length_Out = accumulator_4;
            return;
        }

        public static void NearestPointOnBezierSegment<T2, T, AdM>(T2 BezierSegment_In, T Point_In, int Iteration_Count_In, out T Point_on_BezierSegment_Out, out float Position_on_BezierSegment_Out, out n10.BezierSegment_R<T> BezierSegment_Out)
            where T2 : n9.IEnumerable<n10.BezierSegment_R<T>> where AdM : struct, n13.IAdaptiveOperatorMinus<T>, n12.IAdaptiveCreateDefault<T>, n13.IAdaptiveLerp<T>, n13.IAdaptiveLength<T>
        {
            var w_0 = default(AdM);
            var Max_Value_1 = float.MaxValue;
            w_0.CreateDefault(Output_Out: out T Output_2);
            var Output_3 = n10.BezierSegment_R<T>.CreateDefault<AdM>();
            float Input_2_4 = (float)Iteration_Count_In;
            float accumulator_6 = Max_Value_1;
            T accumulator_7 = Output_2;
            float accumulator_8 = 0F;
            n10.BezierSegment_R<T> accumulator_9 = Output_3;
            var i_11 = 0;
            foreach (var item_5 in BezierSegment_In)
            {
                var splicer_10 = item_5;
                var i_local_12 = i_11;
                float accumulator_14 = accumulator_6;
                T accumulator_15 = accumulator_7;
                float accumulator_16 = accumulator_8;
                n10.BezierSegment_R<T> accumulator_17 = accumulator_9;
                for (var i_13 = 0; i_13 < Iteration_Count_In; i_13++)
                {
                    var i_local_18 = i_13;
                    float Input_19 = (float)i_local_18;
                    bool Apply_20 = true;
                    var Output_21 = Input_19;
                    if (Apply_20)
                    {
                        var Output_22 = (float)Input_19 / Input_2_4;
                        Output_21 = Output_22;
                    }

                    n11._Operations_.Sample<T, AdM>(Input_In: splicer_10, Scalar_In: Output_21, Output_Out: out T Output_23);
                    bool Apply_24 = true;
                    var Output_25 = Point_In;
                    if (Apply_24)
                    {
                        w_0.OperatorMinus(Input_In: Point_In, Input_2_In: Output_23, Output_Out: out Output_25);
                    }

                    w_0.Length(Input_In: Output_25, Result_Out: out float Result_26);
                    var Result_27 = Result_26 < accumulator_14;
                    n19._Operations_.Switch_Boolean<float>(Condition_In: Result_27, Input_In: accumulator_16, Input_2_In: Output_21, Output_Out: out float Output_28);
                    n19._Operations_.Switch_Boolean<T>(Condition_In: Result_27, Input_In: accumulator_15, Input_2_In: Output_23, Output_Out: out T Output_29);
                    n19._Operations_.Switch_Boolean<float>(Condition_In: Result_27, Input_In: accumulator_14, Input_2_In: Result_26, Output_Out: out float Output_30);
                    n19._Operations_.Switch_Boolean<n10.BezierSegment_R<T>>(Condition_In: Result_27, Input_In: accumulator_17, Input_2_In: splicer_10, Output_Out: out n10.BezierSegment_R<T> Output_31);
                    accumulator_14 = Output_30;
                    accumulator_15 = Output_29;
                    accumulator_16 = Output_28;
                    accumulator_17 = Output_31;
                }

                accumulator_6 = accumulator_14;
                accumulator_7 = accumulator_15;
                accumulator_8 = accumulator_16;
                accumulator_9 = accumulator_17;
                i_11++;
            }

            Point_on_BezierSegment_Out = accumulator_7;
            Position_on_BezierSegment_Out = accumulator_8;
            BezierSegment_Out = accumulator_9;
            return;
        }

        public static void BezierSegmentsFromBezierKnots<T, AdM>(n6.Spread<n5.BezierKnot_R<T>> BezierKnots_In, out n6.Spread<n10.BezierSegment_R<T>> Result_Out, out int Segment_Count_Out)
            where AdM : struct, n12.IAdaptiveCreateDefault<T>
        {
            var w_0 = default(AdM);
            int __pad_LWnZhAj7WHeNg56bbTRX6t_1 = __slot_LWnZhAj7WHeNg56bbTRX6t;
            n8._Operations_.Count<n5.BezierKnot_R<T>>(Input_In: BezierKnots_In, Count_Out: out int Count_2);
            bool Apply_3 = true;
            var Output_4 = Count_2;
            if (Apply_3)
            {
                var Output_5 = Count_2 - __pad_LWnZhAj7WHeNg56bbTRX6t_1;
                Output_4 = Output_5;
            }

            int Input_2_6 = 0;
            var Result_7 = Output_4 > Input_2_6;
            var Empty_8 = n8._Operations_.CreateDefault<n10.BezierSegment_R<T>>();
            n6.Spread<n10.BezierSegment_R<T>> Output_9;
            if (Result_7)
            {
                n6.Spread<n10.BezierSegment_R<T>> __cp_L2hD23BMtgBNusWQozeS5Z = n8._Operations_.CreateDefault<n10.BezierSegment_R<T>>();
                int __pad_IlFGrj81EsYPaSGPxkJOJm_10 = __slot_IlFGrj81EsYPaSGPxkJOJm;
                bool Apply_11 = true;
                var Output_12 = BezierKnots_In;
                if (Apply_11)
                {
                    n8._Operations_.Skip<n5.BezierKnot_R<T>>(Input_In: BezierKnots_In, Count_In: __pad_IlFGrj81EsYPaSGPxkJOJm_10, Output_Out: out Output_12);
                }

                n1.NodeContext Node_Context_13 = n1.NodeContext.Default.CreateSubContext("Ve9QvEWam1QMhGjejnDn64", "NaZlUDe0nV6MMoF48xxLUw", 22441U);
                var Output_14 = n5.BezierKnot_R<T>.Create<AdM>(Node_Context: Node_Context_13);
                n20._Operations_.FirstOrDefault<n6.Spread<n5.BezierKnot_R<T>>, n5.BezierKnot_R<T>>(Input_In: BezierKnots_In, Default_Value_In: Output_14, Output_Out: out n6.Spread<n5.BezierKnot_R<T>> Output_15, Result_Out: out n5.BezierKnot_R<T> Result_16);
                n5.BezierKnot_R<T> accumulator_18 = Result_16;
                var builder_36 = n4.CollectionBuilders.GetBuilder(__cp_L2hD23BMtgBNusWQozeS5Z, 16);
                n6.Spread<n10.BezierSegment_R<T>> output_37;
                try
                {
                    var BezierKnot_Count_19 = Output_12.Count;
                    var __safeGuard_20 = BezierKnot_Count_19 >= Output_4;
                    for (var i_17 = 0; i_17 < Output_4; i_17++)
                    {
                        var splicer_21 = __safeGuard_20 ? Output_12[i_17] : BezierKnot_Count_19 > 0 ? Output_12[i_17 % BezierKnot_Count_19] : default(n5.BezierKnot_R<T>);
                        var i_local_22 = i_17;
                        var Output_27 = accumulator_18.Split(Point_Out: out T Point_23, Control1_Out: out T Control1_24, Control2_Out: out T Control2_25, Mode_Out: out int Mode_26);
                        var Output_32 = splicer_21.Split(Point_Out: out T Point_28, Control1_Out: out T Control1_29, Control2_Out: out T Control2_30, Mode_Out: out int Mode_31);
                        var Output_33 = n10.BezierSegment_R<T>.CreateDefault<AdM>();
                        bool Apply_34 = true;
                        var Output_35 = Output_33;
                        if (Apply_34)
                        {
                            Output_35 = Output_33.Join(Control_1_In: Point_23, Control_2_In: Control2_25, Control_3_In: Control1_29, Control_4_In: Point_28);
                        }

                        builder_36.Add(Output_35);
                        accumulator_18 = splicer_21;
                    }
                }
                finally
                {
                    output_37 = builder_36.Commit();
                }

                Output_9 = output_37;
            }
            else
            {
                Output_9 = Empty_8;
            }

            Result_Out = Output_9;
            Segment_Count_Out = Output_4;
            return;
        }

        [n1.ElementAttribute(TracingId = 20926U, DocumentId = "Ve9QvEWam1QMhGjejnDn64", PersistentId = "N4SuXdBqUMvNuYX47E6f1Z", Name = "__slot_N4SuXdBqUMvNuYX47E6f1Z")]
        public static int __slot_N4SuXdBqUMvNuYX47E6f1Z = 1;
        [n1.ElementAttribute(TracingId = 21195U, DocumentId = "Ve9QvEWam1QMhGjejnDn64", PersistentId = "Jme99DIsa7RNJ71zCAIgjQ", Name = "__slot_Jme99DIsa7RNJ71zCAIgjQ")]
        public static int __slot_Jme99DIsa7RNJ71zCAIgjQ = 1;
        [n1.ElementAttribute(TracingId = 22320U, DocumentId = "Ve9QvEWam1QMhGjejnDn64", PersistentId = "LWnZhAj7WHeNg56bbTRX6t", Name = "__slot_LWnZhAj7WHeNg56bbTRX6t")]
        public static int __slot_LWnZhAj7WHeNg56bbTRX6t = 1;
        [n1.ElementAttribute(TracingId = 22408U, DocumentId = "Ve9QvEWam1QMhGjejnDn64", PersistentId = "IlFGrj81EsYPaSGPxkJOJm", Name = "__slot_IlFGrj81EsYPaSGPxkJOJm")]
        public static int __slot_IlFGrj81EsYPaSGPxkJOJm = 1;
        static _Operations_()
        {
        }
    }
}

namespace _VL_Bezier_Cubic_.Math.Advanced
{
    [n1.ElementAttribute(TracingId = 27796U, DocumentId = "Ve9QvEWam1QMhGjejnDn64", PersistentId = "O9SrTHrqUZiO2vWK9x5b3Y", Name = "BezierKnot_R")]
    [n2.SerializableAttribute]
    public class BezierKnot_R<T> : n1.VLObject, n2.IDisposable
    {
        [n4.CreateNewAttribute]
        public static n5.BezierKnot_R<T> Create<AdM>(n1.NodeContext Node_Context)
            where AdM : struct, n12.IAdaptiveCreateDefault<T>
        {
            Node_Context = Node_Context.WithIsImmutable(true);
            var instance = new BezierKnot_R<T>(Node_Context, n1.VLObject.NewIdentity());
            return instance.__Create__<AdM>(Node_Context);
        }

        [n4.CreateDefaultAttribute]
        public static n5.BezierKnot_R<T> CreateDefault<AdM>()
            where AdM : struct, n12.IAdaptiveCreateDefault<T>
        {
            return __DEFAULT__ ?? (__DEFAULT__ = __COMPUTE__());
            n5.BezierKnot_R<T> __COMPUTE__()
            {
                var context = n1.NodeContext.Default.WithIsImmutable(true);
                var instance = new BezierKnot_R<T>(context, n1.VLObject.NewIdentity());
                return instance.__CreateDefault__<AdM>();
            }
        }

        [n1.ElementAttribute(IsAutoGenerated = true)]
        public static n5.BezierKnot_R<T> __DEFAULT__;
        public n5.BezierKnot_R<T> Join<AdM>(T Point_In, T Control1_In, T Control2_In, int Mode_In)
            where AdM : struct, n12.IAdaptiveCreateDefault<T>
        {
            var w_0 = default(AdM);
            T __auto_1 = Point_In;
            w_0.CreateDefault(Output_Out: out T Output_2);
            bool Apply_3 = true;
            if (Apply_3)
            {
                n14._Operations_.ConstrainTypes<T>(Input_In: Point_In, Input_2_In: Control1_In, Input_3_In: Control2_In, Input_4_In: Output_2);
            }

            T __auto_4 = Control1_In;
            T __auto_5 = Control2_In;
            int __auto_6 = Mode_In;
            n5.BezierKnot_R<T> that_7 = this;
            that_7 = !n9.EqualityComparer<T>.Default.Equals(Point_In, this.Point) || !n9.EqualityComparer<T>.Default.Equals(Control1_In, this.Control1) || !n9.EqualityComparer<T>.Default.Equals(Control2_In, this.Control2) || Mode_In != this.Mode ? new BezierKnot_R<T>(this)
            {Point = Point_In, Control1 = Control1_In, Control2 = Control2_In, Mode = Mode_In} : that_7;
            return that_7;
        }

        public n5.BezierKnot_R<T> Split(out T Point_Out, out T Control1_Out, out T Control2_Out, out int Mode_Out)
        {
            T __auto_0 = this.Point;
            T __auto_1 = this.Control1;
            T __auto_2 = this.Control2;
            int __auto_3 = this.Mode;
            Point_Out = __auto_0;
            Control1_Out = __auto_1;
            Control2_Out = __auto_2;
            Mode_Out = __auto_3;
            return this;
        }

        public n5.BezierKnot_R<T> __Create__<AdM>(n1.NodeContext Node_Context)
            where AdM : struct, n12.IAdaptiveCreateDefault<T>
        {
            n7.RuntimeHelpers.EnsureSufficientExecutionStack();
            var w_0 = default(AdM);
            w_0.CreateDefault(out T __out_8);
            w_0.CreateDefault(out T __out_9);
            w_0.CreateDefault(out T __out_10);
            n5.BezierKnot_R<T> that_1 = this;
            this.Point = __out_8;
            this.Control1 = __out_9;
            this.Control2 = __out_10;
            this.Mode = 0;
            return that_1;
        }

        public n5.BezierKnot_R<T> __CreateDefault__<AdM>()
            where AdM : struct, n12.IAdaptiveCreateDefault<T>
        {
            var w_0 = default(AdM);
            w_0.CreateDefault(out T __out_11);
            w_0.CreateDefault(out T __out_12);
            w_0.CreateDefault(out T __out_13);
            n5.BezierKnot_R<T> that_1 = this;
            this.Point = __out_11;
            this.Control1 = __out_12;
            this.Control2 = __out_13;
            this.Mode = 0;
            return that_1;
        }

        public void Dispose()
        {
            return;
        }

        void n2.IDisposable.Dispose()
        {
            using var __current_services = __GetServiceRegistry__().MakeCurrentIfNone();
            Dispose();
        }

        [n1.ElementAttribute(TracingId = 27799U, DocumentId = "Ve9QvEWam1QMhGjejnDn64", PersistentId = "BvQfjJHJE5pPV1W8INOJx7", Name = "Point")]
        public T Point;
        [n1.ElementAttribute(TracingId = 27800U, DocumentId = "Ve9QvEWam1QMhGjejnDn64", PersistentId = "TFbhLDTxYJrMEZ9yfJfkmV", Name = "Control1")]
        public T Control1;
        [n1.ElementAttribute(TracingId = 27802U, DocumentId = "Ve9QvEWam1QMhGjejnDn64", PersistentId = "ElUco9VGluWOn3YonNLVDQ", Name = "Control2")]
        public T Control2;
        [n1.ElementAttribute(TracingId = 27803U, DocumentId = "Ve9QvEWam1QMhGjejnDn64", PersistentId = "AFG92RbB51KLnxcrzSiEpA", Name = "Mode")]
        public int Mode;
        public BezierKnot_R(n1.NodeContext __context__, uint __identity__): base(__context__, __identity__)
        {
        }

        internal BezierKnot_R(BezierKnot_R<T> other): base(other)
        {
            this.Point = other.Point;
            this.Control1 = other.Control1;
            this.Control2 = other.Control2;
            this.Mode = other.Mode;
        }

        protected override n1.IVLObject __With__(n9.IReadOnlyDictionary<string, n2.Object> values)
        {
            return __WITH__(n1.CompilationHelper.GetValueOrExisting(values, "Point", in Point), n1.CompilationHelper.GetValueOrExisting(values, "Control1", in Control1), n1.CompilationHelper.GetValueOrExisting(values, "Control2", in Control2), n1.CompilationHelper.GetValueOrExisting(values, "Mode", in Mode));
        }

        internal BezierKnot_R<T> __WITH__(T Point, T Control1, T Control2, int Mode)
        {
            n5.BezierKnot_R<T> that_0 = this;
            that_0 = !n9.EqualityComparer<T>.Default.Equals(Point, this.Point) || !n9.EqualityComparer<T>.Default.Equals(Control1, this.Control1) || !n9.EqualityComparer<T>.Default.Equals(Control2, this.Control2) || Mode != this.Mode ? new BezierKnot_R<T>(this)
            {Point = Point, Control1 = Control1, Control2 = Control2, Mode = Mode} : that_0;
            return that_0;
        }
    }
}

namespace _VL_Bezier_Cubic_
{
    public struct __AdaptiveImplementations__Ve9QvEWam1QMhGjejnDn64 : n12.IAdaptiveCreateDefault<n10.BezierSegment_R<n15.Vector3>>, n12.IAdaptiveCreateDefault<n15.Vector3>, n13.IAdaptiveLerp<n10.BezierSegment_R<n15.Vector3>>, n13.IAdaptiveLerp<n15.Vector3>
    {
        public void CreateDefault(out n10.BezierSegment_R<n15.Vector3> Output_Out)
        {
            var Output_0 = n10.BezierSegment_R<n15.Vector3>.CreateDefault<n16.__AdaptiveImplementations__Ve9QvEWam1QMhGjejnDn64>();
            Output_Out = Output_0;
            return;
        }

        public void CreateDefault(out n15.Vector3 Output_Out)
        {
            var Zero_0 = n18._Operations_.CreateDefault();
            Output_Out = Zero_0;
            return;
        }

        public void Lerp(n10.BezierSegment_R<n15.Vector3> Input_In, n10.BezierSegment_R<n15.Vector3> Input_2_In, float Scalar_In, out n10.BezierSegment_R<n15.Vector3> Output_Out)
        {
            n11._Operations_.Lerp<n15.Vector3, n16.__AdaptiveImplementations__Ve9QvEWam1QMhGjejnDn64>(Input_In: Input_In, Input_2_In: Input_2_In, Scalar_In: Scalar_In, Output_Out: out n10.BezierSegment_R<n15.Vector3> Output_0);
            Output_Out = Output_0;
            return;
        }

        public void Lerp(n15.Vector3 Input_In, n15.Vector3 Input_2_In, float Scalar_In, out n15.Vector3 Output_Out)
        {
            var Output_0 = n21.Vector3Nodes.Lerp(input: ref Input_In, input2: ref Input_2_In, scalar: Scalar_In);
            Output_Out = Output_0;
            return;
        }
    }
}